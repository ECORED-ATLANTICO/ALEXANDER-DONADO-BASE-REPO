{"remainingRequest":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/src/views/Tema2.vue?vue&type=template&id=1b2f8f1b&lang=pug","dependencies":[{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/src/views/Tema2.vue","mtime":1740409892037},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDIKICAgICAgaDEgSW1wb3J0YW5jaWEgZGUgbGFzIGZydXRhcyB5IHZlcmR1cmFzCgogICAgLmJnX2ltZ183Lm1iLTUKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi0zKGRhdGEtYW9zPSJ6b29tLWluLWRvd24iKQogICAgICAgIC5jb2wtbWQtNi5jb2wtbGctNS5tYi0yCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdGVtYTIvaW1nXzEucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykubXgtYXV0bwogICAgICAgIC5jb2wtbGctNwogICAgICAgICAgcC5tYi0wIExhcyBmcnV0YXMgeSB2ZXJkdXJhcyBzb24gZnVuZGFtZW50YWxlcyBlbiBudWVzdHJhIGRpZXRhIHkgdGllbmVuIHVuIHBvdGVudGUgaW1wYWN0byBlbiBsYSBzYWx1ZCBodW1hbmEsIGdyYWNpYXMgYSBzdSBjb250ZW5pZG8gZGl2ZXJzbyB5IHJpY28gZW4gY29tcHVlc3RvcyBiaW9hY3Rpdm9zLiBFc3RhcyBzdXN0YW5jaWFzLCBjb25vY2lkYXMgY29tbyBmaXRvcXXDrW1pY29zLCBlc3TDoW4gcHJlc2VudGVzIGVuIGxvcyBhbGltZW50b3MgZGUgb3JpZ2VuIHZlZ2V0YWwgZSBpbnRlcnZpZW5lbiBlbiBtw7psdGlwbGVzIHByb2Nlc29zIGJpb2zDs2dpY29zLCBvZnJlY2llbmRvIGJlbmVmaWNpb3MgcXVlIHZhbiBtw6FzIGFsbMOhIGRlIGxhIG51dHJpY2nDs24gYsOhc2ljYS4gQSB0cmF2w6lzIGRlIGxhIGludmVzdGlnYWNpw7NuLCBzZSBoYSBkZW1vc3RyYWRvIHF1ZSBlc3RvcyBjb21wdWVzdG9zIHB1ZWRlbiBjb250cmlidWlyIGEgbGEgcHJldmVuY2nDs24gZGUgZW5mZXJtZWRhZGVzLCBtZWpvcmFyIGxhIHNhbHVkIGNhcmRpb3Zhc2N1bGFyIHkgcmV0cmFzYXIgZWwgZW52ZWplY2ltaWVudG8uIEVuIGVzdGUgYXBhcnRlLCBleHBsb3JhcmVtb3MgbGFzIHN1c3RhbmNpYXMgYmlvYWN0aXZhcywgbG9zIGVzdGVyb2xlcyB2ZWdldGFsZXMgeSBsb3MgbWVjYW5pc21vcyBxdWUgYWZlY3RhbiBsYSBjYWxpZGFkIGRlIGxhcyBmcnV0YXMgeSB2ZXJkdXJhcywgcmVzYWx0YW5kbyBzdSBwYXBlbCBjcnVjaWFsIGVuIGxhIHByb21vY2nDs24gZGVsIGJpZW5lc3RhciB5IGxhIHNhbHVkIGEgbG8gbGFyZ28gZGUgbGEgdmlkYS4KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTMoZGF0YS1hb3M9Inpvb20taW4tZG93biIpCiAgICAgIC5kaXYubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgaDMuYmdyXzMucG9zaXRpb24tcmVsYXRpdmUgU3VzdGFuY2lhcyBiaW9hY3RpdmFzCiAgICAgICAgICBpbWcucHN0KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdGVtYTEvaW1nXzMuc3ZnJywgYWx0PScnKQoKICAgIC5iZ19pbWdfOC5tYi0zCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItMChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAuY29sLWxnLTEyLm1iLTIKICAgICAgICAgIHAgTGFzIHN1c3RhbmNpYXMgYmlvYWN0aXZhcyB0YW1iacOpbiBsbGFtYWRhcyBmaXRvcXXDrW1pY29zIGNvcnJlc3BvbmRlbiBhIHVuYSBzZXJpZSBkZSBjb21wdWVzdG9zIHF1ZSBlc3TDoW4gcHJlc2VudGVzIGVuIGxvcyBhbGltZW50b3MgZGUgb3JpZ2VuIHZlZ2V0YWwsIHRhbGVzIGNvbW8gbGFzIGZydXRhcyB5IHZlcmR1cmFzLiBTZSBkZW5vbWluYW4gc3VzdGFuY2lhcyBiaW9hY3RpdmFzIHB1ZXMgdGllbmVuIGFjdGl2aWRhZCBiaW9sw7NnaWNhLCBzaW4gZW1iYXJnbyBubyBzb24gbnV0cmllbnRlcyBlc2VuY2lhbGVzIHBhcmEgbGEgdmlkYSwgYXVuIGFzw60gdGllbmUgZWZlY3RvcyBwb3NpdGl2b3MgZW4gbGEgc2FsdWQgZGUgbGFzIHBlcnNvbmFzLiAKCiAgICAgICAgLmNvbC1sZy03Lm1iLTMKICAgICAgICAgIC5jYWpvbi5iZy0zLmdfMTgubWItMwogICAgICAgICAgICAucm93Lm1iLTQKICAgICAgICAgICAgICAuY29sLWxnLTEyLnAtNC5wcy01IAogICAgICAgICAgICAgICAgcCBFbCDDoXJlYSBkZSBsb3MgZml0b3F1w61taWNvcyBoYSBzaWRvIGZ1ZXJ0ZW1lbnRlIGVzdHVkaWFkYSBlbiBsYXMgw7psdGltYXMgZMOpY2FkYXMsIHB1ZXMgc2UgaGEgZW5jb250cmFkbyBxdWUgZW4gZWwgbGFyZ28gcGxhem8gdGllbmVuIGVmZWN0b3MgbXV5IHBvc2l0aXZvcyBwYXJhIGxhcyBwZXJzb25hcyBxdWUgbGFzIGNvbnN1bWVuLCBwdWVzdG8gcXVlIGRlc2NvbnRhbWluYW4gZWwgY3VlcnBvIGRlIGxhIHByZXNlbmNpYSBkZSBkcm9nYXMgeSB0b3hpbmFzLCBwdWVkZW4gcHJldmVuaXIgZWwgY8OhbmNlciwgbmV1dHJhbGl6YW4gbG9zIHJhZGljYWxlcyBsaWJyZSwgbWVqb3JhbiBsYSBwcmVzacOzbiBzYW5ndcOtbmVhIHkgbGEgY29hZ3VsYWNpw7NuIGRlIGxhIHNhbmdyZTsgcG9yIGxvIGN1YWwgYnJpbmRhbiBwcm90ZWNjacOzbiBjb250cmEgZW5mZXJtZWRhZGVzIGNhcmRpb3Zhc2N1bGFyZXMuIE90cm9zIGJlbmVmaWNpb3MgcXVlIHNlIGhhbiBlbmNvbnRyYWRvIGVzIHF1ZSB0aWVuZW4gYWxndW5hcyBwcm9waWVkYWRlcyBxdWUgcmV0cmFzYW4gbG9zIHNpZ25vcyBkZWwgZW52ZWplY2ltaWVudG8geSBkaXNtaW51eWUgbGEgcHJvYmFiaWxpZGFkIGRlIGFkcXVpcmlyIGVuZmVybWVkYWRlcyBhc29jaWFkYXMgYSBsYSB2ZWplei4KCiAgICAgICAgLmNvbC1tZC02LmNvbC1sZy01Lm1iLTMKICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy90ZW1hMi9pbWdfMi5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKS5teC1hdXRvCgogICAgICAgIC5jb2wtbGctMTAubWItNAogICAgICAgICAgaDUudGV4dC1jZW50ZXIgVW4gZWplbXBsbyBkZSBsYXMgZGlmZXJlbnRlcyBzdXN0YW5jaWFzIGJpb2FjdGl2YXMgc29uIGxvcyBwaWdtZW50b3MgZGUgbGFzIGZydXRhcyB5IHZlcmR1cmFzIGVuIGVsIHF1ZSBzZSBlbmN1ZW50cmFuIGxhcyBzaWd1aWVudGVzIGNsYXNpZmljYWNpb25lczoKCiAgICAgICAgLmNvbC1sZy0xMC5tYi01CiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItMAogICAgICAgICAgICAuY29sLXhsLTQuY29sLWxnLTYuY29sLW1kLTkuY29sLTExLm1iLTQubWIteGwtMAogICAgICAgICAgICAgIC5jcmRfaG92ZXJfdHh0KGRhdGEtYW9zPSJmbGlwLWxlZnQiKQogICAgICAgICAgICAgICAgLmNyZF9ob3Zlcl90eHQtLWltZwogICAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy90ZW1hMi9pbWdfMy5wbmciLCBhbHQ9ImFsdCIpCiAgICAgICAgICAgICAgICAuY3JkX2hvdmVyX3R4dC0tYm9keQogICAgICAgICAgICAgICAgICBoNC5tYi0zIFRlcnBlbm9zCiAgICAgICAgICAgICAgICAgIHAubWItMCBDdW1wbGVuIHVuYSBmdW5jacOzbiBhbnRpb3hpZGFudGUsIGVuIGVzdGUgZ3J1cG8gZXN0w6FuIGxvcyBwaWdtZW50b3MgY2Fyb3Rlbm9pZGVzLiAKCiAgICAgICAgICAgIC5jb2wteGwtNC5jb2wtbGctNi5jb2wtbWQtOS5jb2wtMTEubWItNC5tYi14bC0wCiAgICAgICAgICAgICAgLmNyZF9ob3Zlcl90eHQoZGF0YS1hb3M9ImZsaXAtbGVmdCIpCiAgICAgICAgICAgICAgICAuY3JkX2hvdmVyX3R4dC0taW1nCiAgICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzL3RlbWEyL2ltZ180LnBuZyIsIGFsdD0iYWx0IikKICAgICAgICAgICAgICAgIC5jcmRfaG92ZXJfdHh0LS1ib2R5CiAgICAgICAgICAgICAgICAgIGg0Lm1iLTMgRmVub2xlcwogICAgICAgICAgICAgICAgICBwLm1iLTAgRGVzZW1wZcOxYW4gdW5hIGZ1bmNpw7NuIGFudGlveGlkYW50ZSwgZW50cmUgZXN0b3Mgc2UgZW5jdWVudHJhbiBhIGxvcyBwaWdtZW50b3MgZmxhdm9ub2lkZXMgcHJlc2VudGVzIGVuIGxvcyBmcnV0b3MgYXp1bGFkb3MuIAoKICAgICAgICAgICAgLmNvbC14bC00LmNvbC1sZy02LmNvbC1tZC05LmNvbC0xMS5tYi00Lm1iLXhsLTAKICAgICAgICAgICAgICAuY3JkX2hvdmVyX3R4dChkYXRhLWFvcz0iZmxpcC1sZWZ0IikKICAgICAgICAgICAgICAgIC5jcmRfaG92ZXJfdHh0LS1pbWcKICAgICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvdGVtYTIvaW1nXzUucG5nIiwgYWx0PSJhbHQiKQogICAgICAgICAgICAgICAgLmNyZF9ob3Zlcl90eHQtLWJvZHkKICAgICAgICAgICAgICAgICAgaDQubWItMyBUaW9sZXMgeSBsaWduYW5vcwogICAgICAgICAgICAgICAgICBwLm1iLTAgRWZlY3TDumFuIHVuYSBmdW5jacOzbiBhbnRpb3hpZGFudGUgeSBzZSBwdWVkZW4gZW5jb250cmFyc2UgZW4gYWxpbWVudG9zIGNvbW8gZWwgYnLDs2NvbGksIGVsIHJlcG9sbG8sIGxhIGNlYm9sbGEsIGVsIHRyaWdvIHkgbGEgY2ViYWRhLgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItMyhkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgLmRpdi5tYi01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICBoMy5iZ3JfMy5wb3NpdGlvbi1yZWxhdGl2ZSBFc3Rlcm9sZXMgdmVnZXRhbGVzCiAgICAgICAgICBpbWcucHN0KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdGVtYTEvaW1nXzMuc3ZnJywgYWx0PScnKQoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNShkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgLmNvbC1tZC02LmNvbC1sZy00Lm1iLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3RlbWEyL2ltZ182LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpLm14LWF1dG8KICAgICAgLmNvbC1sZy04Lm1iLTQKICAgICAgICBwLm1iLTMgQ29ycmVzcG9uZGVuIGEgZXN0ZXJvbGVzIHByb3ZlbmllbnRlcyBkZSBsYXMgcGxhbnRhcyB5IHRpZW5lbiB1biBjb21wb3J0YW1pZW50byBzaW1pbGFyIGFsIGNvbGVzdGVyb2wgcHVlc3RvIHF1ZSBjdW1wbGVuIGZ1bmNpb25lcyBzaW1pbGFyZXM6IHNvbiBsb3MgcHJlY3Vyc29yZXMgZGUgbGEgc8OtbnRlc2lzIGRlIGFsZ3VuYXMgaG9ybW9uYXMgeSBzaXJ2ZW4gcGFyYSBlc3RhYmlsaXphciBhIGxhcyBtZW1icmFuYXMgY2VsdWxhcmVzLiBBZGVtw6FzLCBzb24gcGFydGljaXBlcyBkZSBsb3MgcHJvY2Vzb3MgZGUgdHJhbnNwb3J0ZSB5IGFsbWFjZW5hbWllbnRvIGRlIGzDrXBpZG9zLgoKICAgICAgICAuY2Fqb24uYmctNC5nXzE4Lm1iLTMKICAgICAgICAgIC5yb3cubWItNAogICAgICAgICAgICAuY29sLWxnLTEyLnAtNC5wcy01IAogICAgICAgICAgICAgIHAgTG9zIGVzdGVyb2xlcyB2ZWdldGFsZXMgc29uIGJlbmVmaWNpb3NvcyBwYXJhIGxhIHNhbHVkIGh1bWFuYSB5IHB1ZWRlbiBlbmNvbnRyYXJzZSBlbiBkaXZlcnNvcyBhbGltZW50b3MgdGFsZXMgY29tbyBsb3MgYWNlaXRlcyBkZTogbWHDrXosIGdpcmFzb2wgeSBvbGl2YSwgdGFtYmnDqW4gZXN0w6FuIHByZXNlbnRlbiBlbiBzaWd1aWVudGVzIGxvcyBmcnV0b3Mgc2Vjb3M6IGxhIGxlY2h1Z2EsIGVsIHRvbWF0ZSB5IGVsIHBsw6F0YW5vLiBFbnRyZSBsb3MgYmVuZWZpY2lvcyBxdWUgYnJpbmRhbiBsb3MgZXN0ZXJvbGVzIHZlZ2V0YWxlcyBlc3TDoSBlbCBkZSByZWR1Y2lyIGxhIGFic29yY2nDs24gZGVsIGNvbGVzdGVyb2wgZGUgYWx0YSBkZW5zaWRhZCwgZGHDsWlubyBwYXJhIGVsIHRvcnJlbnRlIHNhbmd1w61uZW8uIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNShkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgLmNvbC1sZy0xMgogICAgICAgIC5kaXYubWItMyhkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgICAgICBoMy5iZ3JfMi5wb3NpdGlvbi1yZWxhdGl2ZSBNZWNhbmlzbW9zIGRlIGFsdGVyYWNpw7NuIGRlIGxhIGNhbGlkYWQgZGUgbGFzIGZydXRhcyB5IHZlcmR1cmFzCiAgICAgICAgICAgIGltZy5wc3RfMihzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3RlbWEyL2ltZ182LnN2ZycsIGFsdD0nJykKICAgIAogICAgLmJnX2ltZ185CiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItMChkYXRhLWFvcz0iem9vbS1pbi1kb3duIikKICAgICAgICAuY29sLWxnLTEyLm1iLTQKICAgICAgICAgIC5ibG9xdWUtdGV4dG8tZy5ibG9xdWUtdGV4dG8tZy5iZy0wOS5wLTMucC1zbS00LnAtbWQtNQogICAgICAgICAgICAuYmxvcXVlLXRleHRvLWdfX2ltZygKICAgICAgICAgICAgICA6c3R5bGU9InsnYmFja2dyb3VuZC1pbWFnZSc6IGB1cmwoJHtyZXF1aXJlKCdAL2Fzc2V0cy9jdXJzby90ZW1hcy90ZW1hMi9pbWdfNy5wbmcnKX0pYH0iCiAgICAgICAgICAgICkKICAgICAgICAgICAgLmJsb3F1ZS10ZXh0by1nX190ZXh0by5wLTQKICAgICAgICAgICAgICBwLm1iLTAgTGFzIGZydXRhcyB5IHZlcmR1cmFzIHNvbiBzZXJlcyB2aXZvcywgcG9yIGxvIHRhbnRvLCBjdW1wbGVuIGNvbiB1biBjaWNsbyBiaW9sw7NnaWNvIGVuIGVsIGN1YWwgc2UgdmVuIHNvbWV0aWRhcyBhIGRpdmVyc29zIGNhbWJpb3MgZXN0cnVjdHVyYWxlcyBtaWVudHJhcyBhdHJhdmllc2FuIGVsIHByb2Nlc28gZGUgbWFkdXJhY2nDs24sIGlndWFsbWVudGUgZXN0w6FuIG9ibGlnYWRhcyBhIHN1ZnJpciBjaWVydG8gZGVzZ2FzdGUgbyBkZXRlcmlvcm8gcXVlIGZpbmFsbWVudGUgY29uY2x1eWUgY29uIGxhIG11ZXJ0ZSBkZWwgcHJvZHVjdG8uIExvcyBjYW1iaW9zIHN1ZnJpZG9zIHBvciBsYXMgZnJ1dGFzIHkgdmVyZHVyYXMgc2UgY2xhc2lmaWNhbiBlbiBkb3MgZ3J1cG9zOiBsb3MgZmlzaW9sw7NnaWNvcyB5IGxvcyBtZXRhYsOzbGljb3MuIEF1bnF1ZSB0YW1iacOpbiBzZSBwcmVzZW50YSBlbCBkZXRlcmlvcm8gZW56aW3DoXRpY28sIGEgY29udGludWFjacOzbiwgZXhwbG9yZW1vcyBlc3RvcyBtZWNhbmlzbW9zLgogICAgICAKICAgICAgICAuY29sLWxnLTEyLm1iLTAKICAgICAgICAgIC50YXJqZXRhLmZvbmRvXzFfMi5wLTQuc2x5ZGVyXzEuYmctMDEKICAgICAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikKICAgICAgICAgICAgICAudGFyamV0YS5iZy0wMS5wLTIKICAgICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIucC0zCiAgICAgICAgICAgICAgICAgIC5jb2wtbWQtMTIuY29sLXhsLTcubWItNAogICAgICAgICAgICAgICAgICAgIGgzLm1iLTIgQ2FtYmlvcyBmaXNpb2zDs2dpY29zOiBsYSBwb3N0Y29zZWNoYToKICAgICAgICAgICAgICAgICAgICBwIEFsIHNlciBzZXBhcmFkYXMgZGUgc3UgcGxhbnRhIG1hZHJlLCBsYXMgZnJ1dGFzIHkgdmVyZHVyYXMgZXhwZXJpbWVudGFuIGNhbWJpb3MgZsOtc2ljb3Mgc2lnbmlmaWNhdGl2b3MuIFVubyBkZSBsb3MgY2FtYmlvcyBtw6FzIG5vdGFibGVzIGVzIGxhIGFsdGVyYWNpw7NuIGRlbCBjb2xvciwgZXNwZWNpYWxtZW50ZSBlbiBsYXMgZnJ1dGFzLCBxdWUgc3VlbGVuIHRlbmVyIGNvbG9yZXMgdml2b3MgcXVlIHRpZW5kZW4gYSBvc2N1cmVjZXJzZSBjb24gZWwgdGllbXBvLiBBZGVtw6FzLCBzZSBvYnNlcnZhbiBtb2RpZmljYWNpb25lcyBlbiBlbCB0YW1hw7FvIHkgZWwgcGVzbywgcmVzdWx0YW50ZXMgZGUgbGEgcMOpcmRpZGEgZGUgYWd1YSBxdWUgc3VmcmVuIGFsIGVzdGFyIGRlc2NvbmVjdGFkYXMgZGUgbGEgcGxhbnRhLgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgLmNvbC1tZC04LmNvbC14bC01Lm1iLTMKICAgICAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3RlbWEyL2ltZ185LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpLm14LWF1dG8KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgLnRhcmpldGEuYmctMDEucC0yCiAgICAgICAgICAgICAgICAucm93Lm9yZGVuYXJfdGFyamV0YS5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5wLTMKICAgICAgICAgICAgICAgICAgLmNvbC1tZC0xMi5jb2wteGwtNy5tYi00CiAgICAgICAgICAgICAgICAgICAgaDMubWItMiBDYW1iaW9zIGZpc2lvbG9naWNvczogbGEgcmVsYWNpw7NuIGVudHJlIGNvbG9yIHkgY2FsaWRhZCBlbiBmcnV0YXMgeSB2ZXJkdXJhczoKICAgICAgICAgICAgICAgICAgICBwIExvcyBjYW1iaW9zIGZpc2lvbMOzZ2ljb3Mgc29uIHByb2Nlc29zIG5hdHVyYWxlcyBxdWUgb2N1cnJlbiBlbiBsYXMgZnJ1dGFzIHkgdmVyZHVyYXMgZHVyYW50ZSBzdSBjaWNsbyBiaW9sw7NnaWNvLiBVbm8gZGUgbG9zIGluZGljYWRvcmVzIG3DoXMgc2lnbmlmaWNhdGl2b3MgZGUgZXN0b3MgY2FtYmlvcyBlcyBlbCBjb2xvciwgcXVlIHJlZmxlamEgZWwgZ3JhZG8gZGUgbWFkdXJleiB5IGxhIGNhbGlkYWQgZGVsIHByb2R1Y3RvLiBDdWFuZG8gdW5hIGZydXRhIG8gdmVnZXRhbCBwcmVzZW50YSBkZWNvbG9yYWNpw7NuIHUgb3NjdXJlY2ltaWVudG8sIHNlIHN1Z2llcmUgcXVlIGhhIGRpc21pbnVpZG8gc3UgY2FsaWRhZCwgbG8gcXVlIHB1ZWRlIGhhY2VybGEgbm8gYXB0YSBwYXJhIGVsIGNvbnN1bW8gaHVtYW5vLgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgLmNvbC1tZC04LmNvbC14bC01Lm1iLTMKICAgICAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3RlbWEyL2ltZ18xMC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKS5teC1hdXRvCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgIC50YXJqZXRhLmJnLTAxLnAtMgogICAgICAgICAgICAgICAgLnJvdy5vcmRlbmFyX3RhcmpldGEuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIucC0zCiAgICAgICAgICAgICAgICAgIC5jb2wtbWQtMTIuY29sLXhsLTcubWItNAogICAgICAgICAgICAgICAgICAgIGgzLm1iLTIgQ2FtYmlvcyBtZXRhYsOzbGljb3M6IGRldGVyaW9ybzoKICAgICAgICAgICAgICAgICAgICBwIEVsIGRldGVyaW9ybyBlbiBmcnV0YXMgeSB2ZXJkdXJhcyByZXN1bHRhIGRlIGxhcyBhY3RpdmlkYWRlcyBtZXRhYsOzbGljYXMgcXVlIG9jdXJyZW4gZGVzcHXDqXMgZGUgbGEgY29zZWNoYSwgbW9tZW50byBlbiBlbCBjdWFsIHNlIHNlcGFyYW4gZGUgbGEgcGxhbnRhIHkgc3UgbWV0YWJvbGlzbW8gY29taWVuemEgYSBjYW1iaWFyLCBsbyBxdWUgYWNlbGVyYSBsb3MgcHJvY2Vzb3MgZGUgZGVncmFkYWNpw7NuLiBTaSBlbCBwcm9kdWN0byBzdWZyZSBhbGfDum4gZGHDsW8gZsOtc2ljbywgY29tbyBsYSBydXB0dXJhIGRlIHN1IHRlamlkbywgbGEgZGVncmFkYWNpw7NuIHNlIGludGVuc2lmaWNhLiBQb3IgZWplbXBsbywgdW5hIGZydXRhIHF1ZSBub3JtYWxtZW50ZSBzZSBkZWdyYWRhIGVuIHZhcmlvcyBkw61hcyBwdWVkZSBsbGVnYXIgYSBkZXRlcmlvcmFyc2UgY29tcGxldGFtZW50ZSBlbiBjdWVzdGnDs24gZGUgaG9yYXMgdHJhcyBzdWZyaXIgdW5hIHBlcnR1cmJhY2nDs24gZsOtc2ljYS4KCiAgICAgICAgICAgICAgICAgIC5jb2wtbWQtOC5jb2wteGwtNS5tYi0zCiAgICAgICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy90ZW1hMi9pbWdfMTEucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykubXgtYXV0bwogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAudGFyamV0YS5iZy0wMS5wLTIKICAgICAgICAgICAgICAgIC5yb3cub3JkZW5hcl90YXJqZXRhLmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLnAtMwogICAgICAgICAgICAgICAgICAuY29sLW1kLTEyLmNvbC14bC03Lm1iLTQKICAgICAgICAgICAgICAgICAgICBoMy5tYi0yIENhbWJpb3MgbWV0YWLDs2xpY29zOiBlZmVjdG9zIGRlIGxhIHDDqXJkaWRhIGRlIGFndWEgZW4gbGEgY2FsaWRhZCBkZSBmcnV0YXMgeSB2ZXJkdXJhczoKICAgICAgICAgICAgICAgICAgICBwIExhIHDDqXJkaWRhIGRlIGFndWEgdHJhcyBsYSBjb3NlY2hhIGFmZWN0YSBsYSBjb25zaXN0ZW5jaWEgZGVsIHRlamlkbyBkZSBmcnV0YXMgeSB2ZXJkdXJhcywgbG8gcXVlIHJlc3VsdGEgZW4gdW5hIGRpc21pbnVjacOzbiBkZSBzdSBjYWxpZGFkIHNlbnNvcmlhbC4gRXN0byBzZSB0cmFkdWNlIGVuIGNhbWJpb3MgbmVnYXRpdm9zIGVuIHN1IGFyb21hLCBicmlsbG8geSBzYWJvci4gQSBtZWRpZGEgcXVlIHNlIGFjdGl2YSBlbCBtZXRhYm9saXNtbyBkZSBkZWdyYWRhY2nDs24sIGxhIHZlbG9jaWRhZCBkZSByZXNwaXJhY2nDs24gZGVsIHByb2R1Y3RvIGF1bWVudGEgY29uc2lkZXJhYmxlbWVudGUsIGxvIHF1ZSBsbGV2YSBhIHVuIGNvbnN1bW8gYWNlbGVyYWRvIGRlIG94w61nZW5vLiBFc3RlIHByb2Nlc28gcHJvdm9jYSBsYSBww6lyZGlkYSBkZSBhesO6Y2FyZXMgeSBvdHJvcyBjb21wdWVzdG9zIGVzZW5jaWFsZXMgcXVlIHNvbiBjcnVjaWFsZXMgcGFyYSBtYW50ZW5lciBlbCBhcm9tYSB5IGVsIHNhYm9yIGNhcmFjdGVyw61zdGljb3MgZGUgbG9zIGFsaW1lbnRvcy4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgIC5jb2wtbWQtOC5jb2wteGwtNS5tYi0zCiAgICAgICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy90ZW1hMi9pbWdfMTIucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykubXgtYXV0bwoKICAgICAgICAgICAgICAudGFyamV0YS5iZy0wMS5wLTIKICAgICAgICAgICAgICAgIC5yb3cub3JkZW5hcl90YXJqZXRhLmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLnAtMwogICAgICAgICAgICAgICAgICAuY29sLW1kLTEyLmNvbC14bC03Lm1iLTQKICAgICAgICAgICAgICAgICAgICBoMy5tYi0yIERldGVyaW9ybyBlbnppbcOhdGljbzoKICAgICAgICAgICAgICAgICAgICBwIExhIHJ1cHR1cmEgZGUgbG9zIHRlamlkb3MgdmVnZXRhbGVzLCB5YSBzZWEgcG9yIGRhw7FvcyBhY2NpZGVudGFsZXMgbyBkdXJhbnRlIGVsIHByb2Nlc28gZGUgcGVsYXIgdW5hIGZydXRhLCBwcm92b2NhIGRlc29yZ2FuaXphY2nDs24gZGUgbGFzIGVuemltYXMgbmF0dXJhbGVzIGNvbnRlbmlkYXMgZW4gbGFzIGPDqWx1bGFzLiBFc3RlIGRhw7FvIGFmZWN0YSBsYXMgbWVtYnJhbmFzIGNlbHVsYXJlcywgbG8gcXVlIHJlc3VsdGEgZW4gbGEgbGliZXJhY2nDs24gZGUgZW56aW1hcyB5IHN1c3RyYXRvcyBxdWUgZGVzZW5jYWRlbmFuIHJlYWNjaW9uZXMgaW5jb250cm9sYWJsZXMuIENvbW8gY29uc2VjdWVuY2lhLCBzZSBwaWVyZGUgdGFudG8gbGEgY2FsaWRhZCBzZW5zb3JpYWwgZGVsIHByb2R1Y3RvLCBpbmNsdXllbmRvIHN1IHNhYm9yIHkgYXJvbWEsIGNvbW8gc3UgdmFsb3IgbnV0cmljaW9uYWwsIGxvIHF1ZSBpbXBhY3RhIG5lZ2F0aXZhbWVudGUgZW4gbGEgZXhwZXJpZW5jaWEgZGVsIGNvbnN1bWlkb3IuCiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAuY29sLW1kLTguY29sLXhsLTQubWItMwogICAgICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdGVtYTIvaW1nXzEzLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpLm14LWF1dG8K"},null]}