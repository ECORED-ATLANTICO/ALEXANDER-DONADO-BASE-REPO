{"remainingRequest":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/src/views/Tema3.vue?vue&type=template&id=2dd264eb&lang=pug","dependencies":[{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/src/views/Tema3.vue","mtime":1740409892038},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/ALEXANDER-DONADO-BASE-REPO/ALEXANDER-DONADO-BASE-REPO/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}